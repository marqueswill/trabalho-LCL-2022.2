// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/11/2023 11:24:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    maquina
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module maquina_vlg_sample_tst(
	clk,
	reset,
	tecla,
	sampler_tx
);
input  clk;
input  reset;
input [3:0] tecla;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or tecla)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module maquina_vlg_check_tst (
	A,
	B,
	crnt,
	E,
	next,
	OP,
	sampler_rx
);
input [3:0] A;
input [3:0] B;
input [1:0] crnt;
input  E;
input [1:0] next;
input [3:0] OP;
input sampler_rx;

reg [3:0] A_expected;
reg [3:0] B_expected;
reg [1:0] crnt_expected;
reg  E_expected;
reg [1:0] next_expected;
reg [3:0] OP_expected;

reg [3:0] A_prev;
reg [3:0] B_prev;
reg [1:0] crnt_prev;
reg  E_prev;
reg [1:0] next_prev;
reg [3:0] OP_prev;

reg [3:0] A_expected_prev;
reg [3:0] B_expected_prev;
reg [1:0] crnt_expected_prev;
reg  E_expected_prev;
reg [1:0] next_expected_prev;
reg [3:0] OP_expected_prev;

reg [3:0] last_A_exp;
reg [3:0] last_B_exp;
reg [1:0] last_crnt_exp;
reg  last_E_exp;
reg [1:0] last_next_exp;
reg [3:0] last_OP_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	crnt_prev = crnt;
	E_prev = E;
	next_prev = next;
	OP_prev = OP;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	crnt_expected_prev = crnt_expected;
	E_expected_prev = E_expected;
	next_expected_prev = next_expected;
	OP_expected_prev = OP_expected;
end


// expected crnt[ 1 ]
initial
begin
	crnt_expected[1] = 1'bX;
end 
// expected crnt[ 0 ]
initial
begin
	crnt_expected[0] = 1'bX;
end 
// expected next[ 1 ]
initial
begin
	next_expected[1] = 1'bX;
end 
// expected next[ 0 ]
initial
begin
	next_expected[0] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected OP[ 3 ]
initial
begin
	OP_expected[3] = 1'bX;
end 
// expected OP[ 2 ]
initial
begin
	OP_expected[2] = 1'bX;
end 
// expected OP[ 1 ]
initial
begin
	OP_expected[1] = 1'bX;
end 
// expected OP[ 0 ]
initial
begin
	OP_expected[0] = 1'bX;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
end 

// expected E
initial
begin
	E_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or crnt_expected or crnt or E_expected or E or next_expected or next or OP_expected or OP)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected crnt = %b | expected E = %b | expected next = %b | expected OP = %b | ",A_expected_prev,B_expected_prev,crnt_expected_prev,E_expected_prev,next_expected_prev,OP_expected_prev);
	$display("| real A = %b | real B = %b | real crnt = %b | real E = %b | real next = %b | real OP = %b | ",A_prev,B_prev,crnt_prev,E_prev,next_prev,OP_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( crnt_expected_prev[0] !== 1'bx ) && ( crnt_prev[0] !== crnt_expected_prev[0] )
		&& ((crnt_expected_prev[0] !== last_crnt_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port crnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", crnt_expected_prev);
		$display ("     Real value = %b", crnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_crnt_exp[0] = crnt_expected_prev[0];
	end
	if (
		( crnt_expected_prev[1] !== 1'bx ) && ( crnt_prev[1] !== crnt_expected_prev[1] )
		&& ((crnt_expected_prev[1] !== last_crnt_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port crnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", crnt_expected_prev);
		$display ("     Real value = %b", crnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_crnt_exp[1] = crnt_expected_prev[1];
	end
	if (
		( E_expected_prev !== 1'bx ) && ( E_prev !== E_expected_prev )
		&& ((E_expected_prev !== last_E_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_E_exp = E_expected_prev;
	end
	if (
		( next_expected_prev[0] !== 1'bx ) && ( next_prev[0] !== next_expected_prev[0] )
		&& ((next_expected_prev[0] !== last_next_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_expected_prev);
		$display ("     Real value = %b", next_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_next_exp[0] = next_expected_prev[0];
	end
	if (
		( next_expected_prev[1] !== 1'bx ) && ( next_prev[1] !== next_expected_prev[1] )
		&& ((next_expected_prev[1] !== last_next_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port next[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", next_expected_prev);
		$display ("     Real value = %b", next_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_next_exp[1] = next_expected_prev[1];
	end
	if (
		( OP_expected_prev[0] !== 1'bx ) && ( OP_prev[0] !== OP_expected_prev[0] )
		&& ((OP_expected_prev[0] !== last_OP_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OP_exp[0] = OP_expected_prev[0];
	end
	if (
		( OP_expected_prev[1] !== 1'bx ) && ( OP_prev[1] !== OP_expected_prev[1] )
		&& ((OP_expected_prev[1] !== last_OP_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OP_exp[1] = OP_expected_prev[1];
	end
	if (
		( OP_expected_prev[2] !== 1'bx ) && ( OP_prev[2] !== OP_expected_prev[2] )
		&& ((OP_expected_prev[2] !== last_OP_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OP_exp[2] = OP_expected_prev[2];
	end
	if (
		( OP_expected_prev[3] !== 1'bx ) && ( OP_prev[3] !== OP_expected_prev[3] )
		&& ((OP_expected_prev[3] !== last_OP_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OP_expected_prev);
		$display ("     Real value = %b", OP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OP_exp[3] = OP_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module maquina_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg [3:0] tecla;
// wires                                               
wire [3:0] A;
wire [3:0] B;
wire [1:0] crnt;
wire E;
wire [1:0] next;
wire [3:0] OP;

wire sampler;                             

// assign statements (if any)                          
maquina i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.clk(clk),
	.crnt(crnt),
	.E(E),
	.next(next),
	.OP(OP),
	.reset(reset),
	.tecla(tecla)
);

// reset
initial
begin
	reset = 1'b0;
	reset = #80000 1'b1;
end 

// clk
initial
begin
	repeat(12)
	begin
		clk = 1'b0;
		clk = #40000 1'b1;
		# 40000;
	end
	clk = 1'b0;
end 
// tecla[ 3 ]
initial
begin
	tecla[3] = 1'b1;
	tecla[3] = #120000 1'b0;
	tecla[3] = #80000 1'b1;
end 
// tecla[ 2 ]
initial
begin
	tecla[2] = 1'b1;
	tecla[2] = #120000 1'b0;
	tecla[2] = #80000 1'b1;
end 
// tecla[ 1 ]
initial
begin
	tecla[1] = 1'b1;
	tecla[1] = #120000 1'b0;
	tecla[1] = #80000 1'b1;
end 
// tecla[ 0 ]
initial
begin
	tecla[0] = 1'b1;
end 

maquina_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.tecla(tecla),
	.sampler_tx(sampler)
);

maquina_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.crnt(crnt),
	.E(E),
	.next(next),
	.OP(OP),
	.sampler_rx(sampler)
);
endmodule

